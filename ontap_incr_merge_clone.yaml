---
#
# var:cluster_admin_ip
# var:db_host_name
# var:oracle_sid
# var:backup_cmd
# var:vol_name
# var:svm_name
# var:backup_dir
# var:run_backup
# var:junction_path
# var:clone_name
# var:mount_clone
# var:clone_srv_ip
# var:dest_host_name
# var:dest_mount_point
# var:dest_mount_owner
# var:dest_mount_group
# var:dest_nfs_options
#
- hosts: "{{ dest_host_name if dest_host_name is defined else 'localhost' }}"
  gather_facts: no
  vars:
    mount: "{{ dest_mount_point if dest_mount_point is defined else '/mnt' }}"
    runumount: "{{ mount_clone if mount_clone is defined else 'false'|bool }}"
  tasks:
    - include_tasks: unmount_nfs_tasks.yaml
      when: runumount|bool == true
- hosts: "{{ db_host_name if db_host_name is defined else 'localhost' }}"
  gather_facts: no
  serial: 1
  vars:
    directory: "{{ backup_dir if backup_dir is defined else '/backup' }}"
    backupcmd: "{{ backup_cmd if backup_cmd is defined else '/home/oracle/oracle-scripts/db-incr-merge.sh -n -s ' + oracle_sid + ' -d ' + directory }}"
    runbackup: "{{ run_backup if run_backup is defined else 'false'|bool }}"
  tasks:
    - name: Backup database as incremental merge
      block:
        - name: Run Backup
          command: "{{ backupcmd }}"
          when: runbackup|bool == true
      rescue:
        - meta: end_play
- name: Create Incr Merge Snapshots
  hosts: localhost
  vars:
    hostname: "{{ cluster_admin_ip }}"
    username: "{{ admin_user }}"
    password: "{{ admin_password }}"
    volume: "{{ vol_name if vol_name is defined else 'nfsvol' }}"
    vserver: "{{ svm_name if svm_name is defined else 'svm0' }}"
    junction: "{{ junction_path + '/' + clone }}"
    clone_num: "{{ number if number is defined else 1 }}"
    snapshot: "clone_snapshot_{{ '%02d'|format(clone_num|int) }}"
    clone: "{{ clone_name if clone_name is defined else volume + '_' + '%02d'|format(clone_num|int) }}"
  tasks:
    - name: Create Clone
      block:
        - name: Unmount DB Clone
          ignore_errors: yes
          na_ontap_volume:
            hostname: "{{ hostname }}"
            username: "{{ username }}"
            password: "{{ password }}"
            https: true
            validate_certs: false
            junction_path: ''
            name: "{{ clone }}"
            vserver: "{{ vserver }}"
        - name: Offline DB Clone
          ignore_errors: yes
          na_ontap_volume:
            hostname: "{{ hostname }}"
            username: "{{ username }}"
            password: "{{ password }}"
            https: true
            validate_certs: false
            is_online: no
            name: "{{ clone }}"
            vserver: "{{ vserver }}"
        - name: Delete DB Clone
          ignore_errors: yes
          na_ontap_volume:
            hostname: "{{ hostname }}"
            username: "{{ username }}"
            password: "{{ password }}"
            https: true
            validate_certs: false
            state: absent
            name: "{{ clone }}"
            vserver: "{{ vserver }}"
        - name: Delete Old Snapshot
          na_ontap_snapshot:
            hostname: "{{ hostname }}"
            username: "{{ username }}"
            password: "{{ password }}"
            https: true
            validate_certs: false
            state: absent
            volume: "{{ volume }}" 
            vserver: "{{ vserver }}"
            snapshot: "{{ snapshot }}"
        - name: Create New Snapshot
          na_ontap_snapshot:
            hostname: "{{ hostname }}"
            username: "{{ username }}"
            password: "{{ password }}"
            https: true
            validate_certs: false
            state: present
            volume: "{{ volume }}" 
            vserver: "{{ vserver }}"
            snapshot: "{{ snapshot }}"
        - name: Clone DB Volume
          na_ontap_volume_clone:
            hostname: "{{ hostname }}"
            username: "{{ username }}"
            password: "{{ password }}"
            https: true
            validate_certs: false
            state: present
            parent_volume: "{{ volume }}"
            vserver: "{{ vserver }}"
            parent_snapshot: "{{ snapshot }}"
            junction_path: "{{ junction }}"
            volume: "{{ clone }}"
            space_reserve: none
- hosts: "{{ dest_host_name if dest_host_name is defined else 'localhost' }}"
  gather_facts: no
  vars:
    lif: "{{ clone_srv_ip if clone_srv_ip is defined else cluster_admin_ip }}"
    mount: "{{ dest_mount_point if dest_mount_point is defined else '/mnt' }}"
    owner: "{{ dest_mount_owner if dest_mount_owner is defined else 'root' }}"
    group: "{{ dest_mount_group if dest_mount_group is defined else 'root' }}"
    options: "{{ dest_nfs_options if dest_nfs_options is defined else 'rw,bg,hard,nointr,rsize=65536,wsize=65536,tcp,actimeo=0,vers=4,timeo=600' }}"
    clone_num: "{{ number if number is defined else 1 }}"
    clone_volume: "{{ vol_name if vol_name is defined else 'nfsvol' }}"
    clone: "{{ clone_name if clone_name is defined else clone_volume + '_' + '%02d'|format(clone_num|int) }}"
    volume: "{{ junction_path + '/' + clone }}"
    runmount: "{{ mount_clone if mount_clone is defined else 'false'|bool }}"
  tasks:
    - include_tasks: mount_nfs_tasks.yaml
      when: runmount|bool == true
